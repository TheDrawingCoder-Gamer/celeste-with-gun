-- title:   game title
-- author:  game developer, email, etc.
-- desc:    short description
-- site:    website link
-- license: MIT License (change this to your license of choice)
-- version: 0.1
-- script:  wasm
-- input: gamepad
-- menu: RETRY

value = 1
		input_x = 1
	else
		axis_x_turned = false
		axis_x_value = 0
		input_x = 0
	end
	
	local jump = btn(4)
	if jump and not input_jump then
		input_jump_pressed = 4
	else
		input_jump_pressed = jump and math.max(0, input_jump_pressed - 1) or 0
	end
	input_jump = jump
	
end

function consume_jump_press()
	local val = input_jump_pressed > 0
	input_jump_pressed = 0
	return val
end
objects = {}
types = {}
lookup = {}
function lookup.__index(self, i) return self.base[i] end
object = {}
object.speed_x = 0
object.speed_y = 0
object.remainder_x = 0
object.remainder_y = 0
object.hit_x = 0
object.hit_y = 0
object.hit_w = 8
object.hit_h = 8




function object.overlaps(self, b, ox, oy)
	if self == b then return false end
	ox = ox or 0
	oy = oy or 0
	return
		ox + self.x + self.hit_x + self.hit_w > b.x + b.hit_x and
		oy + self.y + self.hit_y + self.hit_h > b.y + b.hit_y and
		ox + self.x + self.hit_x < b.x + b.hit_x + b.hit_w and
  oy + self.y + self.hit_y < b.y + b.hit_y + b.hit_h		
end

function object.contains(self, px, py)
	return
		px >= self.x + self.hit_x and
		px < self.x + self.hit_x + self.hit_w and
		py >= self.y + self.hit_y and
		py < self.y + self.hit_y + self.hit_h
end

function object.update(self) end
function object.draw(self) 
	local flip = 0
	if self.flip_x then
		flip = flip + 1
	end
	if self.flip_y then
		flip = flip + 2
	end
	spr(self.spr, self.x, self.y, 0, 1, flip)
end

function object.check_solid(self, ox, oy)
	ox = ox or 0
	oy = oy or 0
	
	for i = math.floor((ox + self.x + self.hit_x) / 8),math.floor((ox + self.x + self.hit_x + self.hit_w - 1) / 8) do
		for j = math.floor((oy + self.y + self.hit_y) / 8),
			math.floor((oy + self.y + self.hit_y + self.hit_h - 1) / 8) do
				if fget(mget(i, j), 1) then
					return true
				end
		end
	end
	
	for _, o in ipairs(objects) do
		if o.solid and o ~= self and not o.destroyed and self:overlaps(o, ox, oy) then
			return true
		end
	end
	return false
end

local function sig(x) 
	if x > 0 then
		return 1
	elseif x < 0 then
		return -1
	else
		return 0
	end
end
function object.move_x(self, x, on_collide)
	self.remainder_x = self.remainder_x + x
	local mx = math.floor(self.remainder_x + 0.5)
	self.remainder_x = self.remainder_x - mx
	
	local total = mx
	local mxs = sig(mx)
	while mx ~= 0 do
		if self:check_solid(mxs, 0) then
			if on_collide then
				return on_collide(self, total - mx, total)
			end
			return true
		else
			self.x = self.x + mxs
			mx = mx - mxs
		end
	end
	
	return false
end
function object.move_y(self, y, on_collide)
	self.remainder_y = self.remainder_y + y
	local my = math.floor(self.remainder_y + 0.5)
	self.remainder_y = self.remainder_y - my
	
	local total = my
	local mys = sig(my)
	while my ~= 0 do
		if self:check_solid(0, mys) then
			if on_collide then
				return on_collide(self, total - my, total)
			end
			return true
		else
			self.y = self.y + mys
			my = my - mys
		end
	end
	
	return false
end

function object.on_collide_x(self, moved, target)
	self.remainder_x = 0
	self.speed_x = 0
	return true
end
function object.on_collide_y(self, moved, target)
	self.remainder_y = 0
	self.speed_y = 0
	return true
end

function object.corner_correct(self, dir_x, dir_y, side_dist, look_ahead, only_sign, func)
	look_ahead = look_ahead or 1
	only_sign = only_sign or 1
	if dir_x ~= 0 then
		for i = 1, side_dist do
			for s = 1, -2, -2 do
				if s == -only_sign then
					goto continue_x
				end
				
				if not self:check_solid(dir_x, i * s) and (not func or func(self, dir_x, i * s)) then
					self.x = self.x + dir_x
					self.y = self.y + i * s
					return true
				end
				::continue_x::
			end
		end
	elseif dir_y ~= 0 then
		for i = 1, side_dist do 
			for s = 1, -2, -2 do
				if s == -only_sign then
					goto continue_y
				end
				
				if not self:check_solid(i * s, dir_y) and (not func or func(self, i * s, dir_y)) then
					self.x = self.x + i * s
					self.y = self.y + dir_y
				end
				::continue_y::
			end
		end
	end
	
	return false
end

function id(tx, ty) return tx + ty * 100 end

function create(type, x, y)
	local obj = {}
	obj.base = type
	obj.x = x
	obj.y = y
	obj.id = id(math.floor(x/8),math.floor(y/8))
	setmetatable(obj, lookup)
	table.insert(objects,obj)
	if obj.init then obj.init(obj) end
	return obj
end
function new_type(sprite)
	local obj = {}
	obj.spr = sprite
	obj.base = object
	setmetatable(obj, lookup)
	types[sprite] = obj
	return obj
end

player = new_type(256)

player.state = 0
player.t_var_jump = 0
player.t_jump_grace = 0
player.auto_var_jump = false
player.var_jump_speed = 0

function player.init(self)
	self.x = self.x + 4
	self.y = self.y + 8
	self.hit_x = -3
	self.hit_y = -6
	self.hit_w = 6
	self.hit_h = 6
	self.spr = 512
	self.state = 0
	self.speed_x = 0
	self.speed_y = 0
end

function player.jump(self)
	consume_jump_press()
	self.state = 0
	self.speed_y = -4
	self.var_jump_speed = -4
	self.speed_x = self.speed_x + input_x * 0.2
	self.t_var_jump = 4
	self.t_jump_grace = 0
	self.auto_var_jump = false
	self:move_y(self.jump_grace_y - self.y)
end

function approach(x, target, max_delta)
	return x < target and math.min(x + max_delta, target) or math.max(x - max_delta, target)
end
function player.update(self)
	local on_ground = self:check_solid(0, 1)
	if on_ground then
		self.t_jump_grace = 4
		self.jump_grace_y = self.y
	else
		self.t_jump_grace = math.max(0, self.t_jump_grace - 1)
	end
	
	if self.state == 0 then
		if input_x ~= 0 then
			self.facing = input_x
		end
		
		local target, accel = 0, 0.2
		if math.abs(self.speed_x) > 2 and input_x == sig(self.speed_x) then
			target,accel = 2, 0.1
		elseif on_ground then
			target, accel = 2, 0.8
		elseif input_x ~= 0 then
			target,accel = 2, 0.4
		end
	 self.speed_x = approach(self.speed_x, input_x * target, accel)

		if not on_ground then 
			local max = btn(1) and 5.5 or 4.4
			if math.abs(self.speed_y) < 0.2 and input_jump then
				self.speed_y = math.min(self.speed_y + 0.4, max)
			else 
				self.speed_y = math.min(self.speed_y + 0.8, max)
			end
			
		end
		
		if self.t_var_jump > 0 then
			if input_jump or self.auto_var_jump then
				self.speed_y = self.var_jump_speed
				self.t_var_jump = self.t_var_jump - 1
			else
				self.t_var_jump = 0
			end
		end
		if input_jump_pressed > 0 then
			if self.t_jump_grace > 0 then
				self:jump()
			end
		end
	end
	self:move_x(self.speed_x, self.on_collide_x)
	self:move_y(self.speed_y, self.on_collide_y)
	if not on_ground then
		self.spr = 515
	elseif input_x ~= 0 then
		if math.floor(t / 10) % 2 == 0 then
			self.spr = 512
		else
			self.spr = 513
		end
	else
		self.spr = 512
	end
end

function player.on_collide_x(self, moved, target)
 if self.state == 0 then 
 	if sig(target) == input_x and self:corner_correct(input_x, 0, 2, 2, -1) then
  	return false
  end
 end
 
 return object.on_collide_x(self, moved, target)
end
function player.on_collide_y(self, moved, target)
	
	
	self.t_var_jump = 0
	return object.on_collide_y(self, moved, target)
end

function player.draw(self)
	set2bpp()
	player_pallete()
	local flip = self.facing ~= 1 and 1 or 0
	spr(self.spr, self.x - 4, self.y - 8, 0, 1, flip)
	set4bpp()
	normal_pallete()
end

da_player = create(player, 0, 0)
-- <TILES>
-- 005:022222222ddddddd2ddddddd2ddddddd2ddddddd2ddddddd2ddddddd2ddddddd
-- 006:22222220ddddddd1ddddddd1ddddddd1ddddddd1ddddddd1ddddddd1ddddddd1
-- 007:2222222223333332233333322333333223333332233333322333333222222222
-- 016:002222000200002000c00c0200c00c0202000002002222200022220000222200
-- 021:2ddddddd2ddddddd2ddddddd2ddddddd2ddddddd2ddddddd2ddddddd01111111
-- 022:ddddddd1ddddddd1ddddddd1ddddddd1ddddddd1ddddddd1ddddddd111111110
-- 033:0665555566666666665556776766677566777576676766676766777567777556
-- 034:6666666066666660566766675776777776775567667575677755777767667567
-- 035:0665555066666666665556776766677566777576676766676766777507777550
-- 039:888888888999a9a989a99a998999a99a8a9aaaaa89aa9aaa899aaaaa89aaaaaa
-- 040:8888888899a999999a9a9a999aaaa999a9a9aa9aaaaaaaaaaaaaaaaaaaaaaaaa
-- 041:88888888999a9998a9a99a98aaaa9998aa9aa9a8aaaa9a98aaaa99a8aaaaa998
-- 042:aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa9aaaaaa9a99aaaaa9a9aaaa9998
-- 043:aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa9a9aaaaa99a9aaaa9a9aaaaa899aaaaa
-- 049:6767766667676777667767566767776766776776777676767666667707777777
-- 050:6777556777576667755677777567666767776777777777677666676777777770
-- 055:8999aaaa89999aaa89a9aaaa899aaaaa89aa9aaa8a9aaaaa89aa9aaa8999aaaa
-- 056:aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
-- 057:aaaa9998aaa9aa98aaaaa9a8aaa9aa98aaaaa998aaaa9a98aaa99998aaaa9998
-- 058:aaaaa998aaaaa9a9aaaa9a99aaaaa9a9aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
-- 059:8999aaaa9a9aaaaa99a9aaaaaa9aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
-- 071:899aaaaa8a99aaaa89a9aaaa8a9aa9aa8999aaaa89a99a9a8999a99988888888
-- 072:aaaaaaaaaaaaaaaaaaaaaaaaa9aa9a9a999aaaa999a9a9a999999a9988888888
-- 073:aaaaaa98aaaaa998aaa9aa98aaaaa9a8a99a999899a99a989a9a999888888888
-- </TILES>

-- <SPRITES>
-- 000:00000551055145044504513751330104110045010701575c445c401105510440
-- 001:1000055155504504410151374dc111040101040145400d5cd71c015001410050
-- 002:0000045155510504550441374137410401044401050105554f5c075d04010411
-- 003:45514510550455505104555f403755ad01006a50470d85504451459004110520
-- 004:f4504110355154104551545055511551656e55518a5f1551055244510490c00c
-- 005:455405511055450400435137cc41110410404504105145554555545505751041
-- 006:4551555155045504513741370104010445044504455155511551455000500510
-- 007:055105505504410151375cc101045003450415dc555505035511010041004040
-- 008:41c045511333550410d0510050504033541001015400047011404cc005411034
-- 009:000000000000000005510000450400001133000001000451450145555c535c55
-- 010:451005501450410113515cc400555004101041014470c45c0501055141504551
-- 011:0510410045501300455010004551505005415450c51054500550155045510541
-- 012:0000000000000000081000000060000000600000081000000000000000000000
-- 016:0665555566666666665556776766677566777576676766676766777567777556
-- 017:6666666066666660566766675776777776775567667575677755777767667567
-- 018:000008a208a2069606960e820e820aaa0aaa0200020006502850885182618261
-- 019:0f038a2083a0ebe08aa2e8208233aaa00200800028610610a06588508a652a50
-- 020:000000000aa000008fa3000083a000008aa200000200000008510000aa650000
-- 032:6767766667676777667767566767776766776776777676767666667707777777
-- 033:6777556777576667755677777567666767776777777777677666676777777770
-- 066:0000000000000000000000000000000000000000000000000000000000c00300
-- 067:0000000000000000000000000000000000000000000000000060060000f00f00
-- 068:0000000000000000060000600f0000f00f0000f00600006000c0030000e18700
-- 069:02000040070000e0870000e1030000c0000000000060060000f00f0008f00f10
-- 070:01000080830000c101000080080000100c1008300e1008700c00003000000000
-- 071:8100008180000001060000600200004000000000000000000000000000000000
-- 080:0000000000000000000000000000000000000000000c3000000e7000000e7000
-- 081:00000000000000000003c0000087e10000818100000000000020040000e00700
-- 082:00e1870000e1870000c003000000000000000000000000000c0000300e100870
-- 083:00f00f000060060000000000000000000000000000000000030000c0870000e1
-- 084:00f3cf0000f3cf0000e1870000c0030000000000081008106c300c36fe700e7f
-- 085:08f00f1000700e00000000000000000000000000040000203e00007c7f1008fe
-- 086:000000000000000000000000000000000000000000000000030000c0b70000ed
-- 087:000000000000000000000000000000000000000000000000800000015000000a
-- 096:000e7000000e7000000c30000000000000000000000000000000000000000000
-- 097:00e007000020040000000000008181000087e1000003c0000000000000000000
-- 098:0e1008700c00003000000000000000000000000000c0030000e1870000e18700
-- 099:870000e1030000c0000000000000000000000000000000000060060000f00f00
-- 100:fe700e7f6c300c36081008100000000000c0030000e1870000f3cf0000f3cf00
-- 101:7f1008fe3e00007c0400002000000000000000000000000000700e0008f00f10
-- 102:b70000ed030000c0000000000000000000000000000000000000000000000000
-- 103:5000000a80000001000000000000000000000000000000000000000000000000
-- 114:00c0030000000000000000000000000000000000000000000000000000000000
-- 115:00f00f0000600600000000000000000000000000000000000000000000000000
-- 116:00e1870000c00300060000600f0000f00f0000f0060000600000000000000000
-- 117:08f00f1000f00f000060060000000000030000c0870000e1070000e002000040
-- 118:000000000c0000300e1008700c1008300800001001000080830000c101000080
-- 119:0000000000000000000000000000000002000040060000608000000181000081
-- </SPRITES>

-- <MAP>
-- 000:838383838383838383838383838383838383838383838383838383838383830000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 001:a2848484848484848484b283838383a284848484848484848484848484b2830000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 002:930000000000000000007383838383930000000000000000000000000073830000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 003:930000000000000000007383838383930000000000000000000000000073830000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 004:930000000000000000007383838383930000000000000000000000000073830000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 005:930000000000000000007383838383930000000000000000000000000073830000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 006:930000000000000000007383838383930000000000000000000000000073830000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 007:930000000000000000007383838383930000000000000000000000000073830000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 008:930000000000000000007383838383930000000000000000000000000073830000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 009:930000000000000000007383838383930000000000000000000000000073830000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 010:930000000000000000007383838383930000000000000000000000000073830000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 011:930000000000000000007484848484940000000000000000000000000073830000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 012:930000000000000000003200320032000000000000000000000000000073830000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 013:930100000000000000000000000000000000000000000000000000000073830000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 014:a382828282828282828282828282828282828282828282828282828282b3830000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 015:838383838383838383838383838383838383838383838383838383838383830000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 016:838383838383838383838383838383838383838383838383838383838383830000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- </MAP>

-- <WAVES>
-- 000:00000000ffffffff00000000ffffffff
-- 001:0123456789abcdeffedcba9876543210
-- 002:0123456789abcdef0123456789abcdef
-- 004:12345689abcd00000000000000000000
-- 005:02468acefeca864202468acefec97520
-- 006:037bfb73037bfb73037bfb73037bfb70
-- 007:fb730037bf037bf037bffb73037bfb70
-- 008:fedcba9876543210fedcba9876543210
-- </WAVES>

-- <SFX>
-- 000:010001040101010201020104010601060105010301000100010001000100010001000100010001000100010001000100010001000100010001000100264000000000
-- 001:030003000300030003000300f100f1000170016001500140f100f1000140014001400140f100f1000140014001400140f100f100f100f100f100f100207000000000
-- 002:0000004000600070008000900090f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000107000000000
-- 003:0300033003500360036003600360f300f300f300f300f300f300f300f300f300f300f300f300f300f300f300f300f300f300f300f300f300f300f300287000000000
-- 004:030003000300030003200330f300f300f300f300f300f300f300f300f300f300f300f300f300f300f300f300f300f300f300f300f300f300f300f300080000000000
-- 005:010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100000000000000
-- 006:030003000300030003000300030003000300030003000300030003000300030003000300030003000300030003000300030003000300030003000300000000000000
-- 016:030003000300f10001b001b0f10001700170f17001700170f100f100f100f100f100f100f100f100f100f100f100f100f100f100f100f100f100f100179000000000
-- </SFX>

-- <PATTERNS>
-- 000:600066000050100050000050600056000050100050000050600058000050000050100050d00056000050100050100050100050c00056100050100050b00056100050100050100050a00056100050100050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 001:600064000060000000100050b0005890f45602f650000050000050000050700454000000000050000000000050000050100050000000000000000000000050000000000000000000000000000000000000000000000000000000000000000000100060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- </PATTERNS>

-- <PATTERNS3>
-- 000:700086000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- </PATTERNS3>

-- <TRACKS>
-- 000:2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002e00df
-- 001:200000e10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- </TRACKS>

-- <TRACKS3>
-- 000:100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- </TRACKS3>

-- <FLAGS>


-- </FLAGS>

-- <PALETTE>
-- 000:1a102c5d275db13e53ef7d57ffcd75a7f07038b76425717929366f3b5dc941a6f673eff7f4f4f494b0c2566c86333c57
-- 001:000020f478fc8414a0fcfcfcfc9838e4005800e8d800808880d010009400000000000000fcfcfc000000000000000000
-- </PALETTE>

